<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.0.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-03-15T12:19:11+08:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">BlackHe</title><subtitle>black的博客，专注于分享技术.</subtitle><entry><title type="html">目录</title><link href="http://localhost:4000/jekyll/update/2020/03/15/%E7%9B%AE%E5%BD%95.html" rel="alternate" type="text/html" title="目录" /><published>2020-03-15T00:00:00+08:00</published><updated>2020-03-15T00:00:00+08:00</updated><id>http://localhost:4000/jekyll/update/2020/03/15/%E7%9B%AE%E5%BD%95</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2020/03/15/%E7%9B%AE%E5%BD%95.html">&lt;h3 id=&quot;mysql&quot;&gt;mysql&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://127.0.0.1:4000/jekyll/update/2020/01/18/%E9%AB%98%E5%8F%AF%E7%94%A8mysql(%E4%B8%80).html&quot;&gt;高可用mysql(一)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://127.0.0.1:4000/jekyll/update/2020/01/18/%E9%AB%98%E5%8F%AF%E7%94%A8mysql(%E4%B8%80).html&quot;&gt;高可用mysql(二)&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;java&quot;&gt;java&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://127.0.0.1:4000/jekyll/update/2020/01/18/%E9%AB%98%E5%8F%AF%E7%94%A8mysql(%E4%B8%80).html&quot;&gt;jave concurrent&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;我写博客的目的&quot;&gt;我写博客的目的&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;梳理知识体系，烂笔头践行者&lt;/li&gt;
  &lt;li&gt;通过一些文笔，使自己更加专业&lt;/li&gt;
  &lt;li&gt;提升自我认知，开源分享更美好&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">mysql</summary></entry><entry><title type="html">高可用mysql-可用性</title><link href="http://localhost:4000/jekyll/update/2020/01/18/%E9%AB%98%E5%8F%AF%E7%94%A8mysql(%E4%B8%80).html" rel="alternate" type="text/html" title="高可用mysql-可用性" /><published>2020-01-18T14:00:00+08:00</published><updated>2020-01-18T14:00:00+08:00</updated><id>http://localhost:4000/jekyll/update/2020/01/18/%E9%AB%98%E5%8F%AF%E7%94%A8mysql(%E4%B8%80)</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2020/01/18/%E9%AB%98%E5%8F%AF%E7%94%A8mysql(%E4%B8%80).html">&lt;blockquote&gt;
  &lt;h3 id=&quot;1-可用性&quot;&gt;1. 可用性&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    讲高可用前，我们先定义一下可用性：即服务器能正常稳如一匹老马般的提供服务。
反之，大到自然灾害，数据中心掉电，服务器宕机，网络瘫痪，磁盘爆满。小到数据库死锁，alter语句锁
全表，糟糕的查询语句压死数据库等。这些情况平时很少发生，可一旦发生，在修复及预热前那段时间，mysql
是不可用的。针对这种情况，你是否想过怎么处理？如果是在可用性要求非常高的领域，这可能是致命的。归根
结底，高可用意味着”更少的宕机时间“。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;2-防患未燃&quot;&gt;2. 防患未燃&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    使用这个词可能会使你记住这一页的内容，标新立异嘛。先发制人通常可以一招制敌。解决一个麻烦最
好的办法，就是别让这个麻烦发生。而且，别让这个麻烦发生的成本，会比发生后，解决麻烦和它本身带来的
成本低不止一个数量级。所以，从需求及设计阶段开始，就将系统（不止mysql）的可用性考虑进去吧。为了
从99到99999而努力吧。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;h3 id=&quot;3-如何实现高可用&quot;&gt;3. 如何实现高可用&lt;/h3&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;一、降低宕机时间，提升平均可用时间
   通过合理的配置，监控，以及规范来避免人为操作错误，定期检修各种监控指标的状态，低于平均指标的
   事项提前做应对处理。
二、降低平均恢复时间
   通过冗余快速恢复。制造适量的冗余是很有必要的，可以在关键时刻，通过冗余做很多事情，譬如快速
   恢复，故障转移，分担压力，任务转移等。冗余可能在不出现宕机的情况下显得多余，但是一旦用到它，
   投资回报率会很高。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;31-提升平均可用时间&quot;&gt;3.1 提升平均可用时间&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. 避免使用复杂的特性，譬如触发器和过滤
2. 监控服务器的状态和性能指数，重要的组件和功能，譬如内存，磁盘空间等，但要避免误报，“狼来了”喊多了就没人在意了
3. 数据库升级，DDL语句等升级需要谨慎安排，多人参与
4. 定期检查复制（上面提的冗余）的完成性
5. 定期进行查询语句审查
6. 归档并清理脏数据，避免以后造成数据三不管地带，谁都不知道它是用来干什么的
7. 为文件保留一些空间，在Linux系统中，可以使用-m选项为文件系统本身保留空间
8. 使用好的命名和约定来避免混乱
9. 保持系统干净，最小权限原则
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;32-降低平均恢复时间&quot;&gt;3.2 降低平均恢复时间&lt;/h4&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1.建立冗余，设计一个有故障转移能力的系统架构（增加空余容量和重复组件）
2.避免单点失效，部署集群系统，并设计切换方案（一主多备，两主多备）
3.故障演练，提高人员素质，有计划的从宕机时间中恢复
4.事后评估，记录，载入故障库，以优化未来的系统架构
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">1. 可用性</summary></entry></feed>